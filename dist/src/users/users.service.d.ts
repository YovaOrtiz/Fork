import { CreateUserDto } from './dto/create-user.dto';
import { PrismaService } from '../prisma.service';
export declare class UsersService {
    private prisma;
    saveResetToken(userId: number, token: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    findByResetToken(token: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    updatePassword(userId: number, hash: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    clearResetToken(userId: number): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    saveEmailToken(userId: number, token: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    findByEmailToken(token: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    confirmEmail(userId: number): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    constructor(prisma: PrismaService);
    getUsers(): import(".prisma/client").Prisma.PrismaPromise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }[]>;
    findByEmail(email: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    findByUsername(username: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    create(data: {
        email: string;
        name: string;
        password: string;
        username: string;
    }): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    createUser(user: CreateUserDto): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    updateUser(id: string, updates: any): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
    deleteUser(id: string): Promise<{
        id: number;
        email: string;
        password: string;
        name: string;
        username: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        emailToken: string | null;
        emailConfirmed: boolean;
    }>;
}
