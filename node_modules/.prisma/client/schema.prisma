// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Para recuperación de contraseña
  resetToken    String?   @unique
  resetTokenExp DateTime?

  // Para confirmación de email
  emailToken     String? @unique
  emailConfirmed Boolean @default(false)
}

model Project {
  id              String          @id @default(uuid())
  name            String
  client          String
  description     String
  startDate       DateTime
  expectedEndDate DateTime
  priority        ProjectPriority
  status          ProjectStatus
  budget          Float
  salesPrice      Float // Nuevo campo: precio de venta
  profitability   Float
  internalCost    Float
  overallProgress Float
  currentStage    String
  areas           Area[]
  createdBy       String
  updatedBy       String // Nuevo campo: último usuario que actualizó
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Area {
  id             String   @id @default(uuid())
  name           String
  status         String
  progress       Float
  responsible    String
  dueDate        DateTime
  estimatedHours Float
  hoursWorked    Float
  project        Project  @relation(fields: [projectId], references: [id])
  projectId      String
}

enum ProjectPriority {
  low
  medium
  high
  critical
}

enum ProjectStatus {
  planning
  active
  on_hold
  completed
  cancelled
}

model Notification {
  id        String                  @id @default(uuid())
  userId    Int // Usuario que recibe la notificación
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority
  read      Boolean                 @default(false)
  createdAt DateTime                @default(now())
  readAt    DateTime?
  channel   NotificationChannelType
  meta      Json?
}

model NotificationChannel {
  id        String                  @id @default(uuid())
  userId    Int // Usuario dueño de la config
  type      NotificationChannelType
  enabled   Boolean                 @default(true)
  config    Json // Config específico por canal (email, slack, telegram, etc.)
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model NotificationSetting {
  id        String                    @id @default(uuid())
  userId    Int // Usuario dueño de la config
  type      NotificationType
  priority  NotificationPriority
  channels  NotificationChannelType[]
  enabled   Boolean                   @default(true)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
}

enum NotificationType {
  project_created
  project_updated
  system_alert
  custom
}

enum NotificationPriority {
  low
  medium
  high
  urgent
}

enum NotificationChannelType {
  email
  slack
  telegram
}
